{"version":3,"sources":["components/Button.js","components/QuoteMachine.js","components/PostTwitter.js","App.js","reportWebVitals.js","index.js"],"names":["Button","buttonDisplayName","clickHandler","onClick","id","QuoteMachine","props","selectedQuote","Typography","class","quote","author","assignNewQuoteIndex","PostTwitter","href","tweet","target","rel","App","state","quotes","selectedQuoteIndex","componentDidMount","bind","selectQuoteIndex","fetch","then","data","json","setState","this","length","Number","isInteger","random","className","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qWASeA,EANA,SAAC,GAAsC,IAArCC,EAAoC,EAApCA,kBAAmBC,EAAiB,EAAjBA,aAChC,OACI,wBAAQC,QAASD,EAAcE,GAAG,YAAlC,SAA+CH,KCiBxCI,G,MAjBM,SAACC,GAClB,OACI,qCAEIA,EAAMC,cAEN,eAACC,EAAA,EAAD,WACI,oBAAGJ,GAAG,OAAN,UAAa,mBAAGK,MAAM,sBAAtB,IAAgDH,EAAMC,cAAcG,SADxE,MACqF,mBAAGN,GAAG,SAAN,SAAgBE,EAAMC,cAAcI,YAGzH,KAEA,cAAC,EAAD,CAAQV,kBAAkB,aAAaC,aAAcI,EAAMM,2BCNxDC,G,MARI,SAACP,GAChB,OACI,mCACA,mBAAGQ,KAAI,iDAA4CR,EAAMS,MAAlD,aAA4DT,EAAMK,OAAlE,wBAAgGP,GAAG,cAAcY,OAAO,SAASC,IAAI,aAAaR,MAAM,8BCyDxJS,E,kDAvDb,WAAYZ,GAAO,IAAD,8BAChB,cAAMA,IACDa,MAAM,CACTC,OAAO,GACPC,mBAAmB,MAErB,EAAKC,kBAAkB,EAAKA,kBAAkBC,KAAvB,gBACvB,EAAKC,iBAAiB,EAAKA,iBAAiBD,KAAtB,gBACtB,EAAKX,oBAAoB,EAAKA,oBAAoBW,KAAzB,gBART,E,qDAYlB,WAAoB,IAAD,OAEjBE,MAAM,yIAEHC,MAAK,SAAAC,GAAI,OAAEA,EAAKC,UAEhBF,MAAK,SAAAC,GAAI,OAAE,EAAKE,SAAS,CAACT,OAAOO,GAAM,EAAKf,0B,yBAIjD,WACE,OAAIkB,KAAKX,MAAMC,OAAOW,QAAWC,OAAOC,UAAUH,KAAKX,MAAME,oBAGpDS,KAAKX,MAAMC,OAAOU,KAAKX,MAAME,oBAF7B,2B,8BAMX,WACE,GAAIS,KAAKX,MAAMC,OAAOW,OAGtB,OAAOG,iBAAO,EAAEJ,KAAKX,MAAMC,OAAOW,OAAO,K,iCAI3C,WACED,KAAKD,SAAS,CACZR,mBAAmBS,KAAKN,uB,oBAI5B,WACE,OACE,sBAAKW,UAAU,MAAM/B,GAAG,YAAxB,UACE,cAAC,EAAD,CAAcG,cAAeuB,KAAKvB,cAAeK,oBAAqBkB,KAAKlB,sBAC3E,uBACA,cAAC,EAAD,CAAaG,MAAOe,KAAKvB,cAAcG,MAAOC,OAAQmB,KAAKvB,cAAcI,gB,GAlD/DyB,aCKHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBb,MAAK,YAAkD,IAA/Cc,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.86c86ced.chunk.js","sourcesContent":["import React from 'react';\nimport '../styles/Button.css';\n\nconst Button = ({buttonDisplayName, clickHandler}) =>{\n    return(\n        <button onClick={clickHandler} id='new-quote'>{buttonDisplayName}</button>\n    )\n};\n\nexport default Button;","import { Typography } from '@material-ui/core';\nimport React from 'react';\nimport Button from './Button';\nimport '../styles/QuoteMachine.css';\n\nconst QuoteMachine = (props) =>{\n    return(\n        <>\n        {\n            props.selectedQuote?\n            (\n            <Typography >\n                <p id='text'><i class=\"fas fa-quote-left\"></i> {props.selectedQuote.quote}</p> - <p id='author'>{props.selectedQuote.author}</p>\n            </Typography>\n            ): \n            null\n        }\n            <Button buttonDisplayName='Next Quote' clickHandler={props.assignNewQuoteIndex}/>\n        </>\n    )\n};\n\nexport default QuoteMachine;","import React from 'react';\nimport '../styles/PostTwitter.css';\n\nconst PostTwitter =(props)=>{\n    return(\n        <>\n        <a href={`https://twitter.com/intent/tweet?text=\"${props.tweet}\"-${props.author}&hashtag=randomquote`} id='tweet-quote' target='_blank' rel='noreferrer' class=\"fab fa-twitter-square\"></a>\n        </>\n    )\n};\n\nexport default PostTwitter;","import React,{Component} from 'react';\nimport {random} from 'lodash';\nimport './styles/App.css';\nimport 'typeface-roboto';\nimport QuoteMachine from './components/QuoteMachine';\nimport PostTwitter from './components/PostTwitter';\n\nclass App extends Component{\n  constructor(props){\n    super(props);\n    this.state={\n      quotes:[],\n      selectedQuoteIndex:null,\n    }\n    this.componentDidMount=this.componentDidMount.bind(this);\n    this.selectQuoteIndex=this.selectQuoteIndex.bind(this);\n    this.assignNewQuoteIndex=this.assignNewQuoteIndex.bind(this);\n  };\n\n  // set quotes and random index quote after page load\n  componentDidMount(){\n    // fetch quotes from url\n    fetch('https://gist.githubusercontent.com/natebass/b0a548425a73bdf8ea5c618149fe1fce/raw/f4231cd5961f026264bb6bb3a6c41671b044f1f4/quotes.json')\n    // get the data from json\n      .then(data=>data.json())\n      // set state quotes to data from json and set random index from method with callback function\n      .then(data=>this.setState({quotes:data},this.assignNewQuoteIndex))\n  };\n\n  // return value of rand index from quotes\n  get selectedQuote(){\n    if(!this.state.quotes.length || !Number.isInteger(this.state.selectedQuoteIndex)){\n      return 'OOOPS WHERE IS MY LIST';\n    }\n      return this.state.quotes[this.state.selectedQuoteIndex];\n    };\n\n  //set random quote index\n  selectQuoteIndex(){\n    if(!this.state.quotes.length){\n      return;\n    }\n    return random(0,this.state.quotes.length-1);\n  };\n\n  // assign new random index\n  assignNewQuoteIndex(){\n    this.setState({\n      selectedQuoteIndex:this.selectQuoteIndex(),\n    });\n  };\n\n  render(){\n    return (\n      <div className=\"App\" id='quote-box'>\n        <QuoteMachine selectedQuote={this.selectedQuote} assignNewQuoteIndex={this.assignNewQuoteIndex} />\n        <br></br>\n        <PostTwitter tweet={this.selectedQuote.quote} author={this.selectedQuote.author}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}